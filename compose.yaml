services:
  nginx:
    image: nginx:latest
    container_name: nginx-load-balancer
    ports:
      - '8080:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - pm2-cluster
    networks:
      - backend

  pm2-cluster:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - '3000-3009:3000-3009' # Expose the API cluster on ports 3000 to 3009
    environment:
      NODE_ENV: production
      REDIS_HOST: redis
      REDIS_PORT: 6379
      PGHOST: postgrestodo
      PGUSER: todo
      PGPASSWORD: todo
      PGDATABASE: todo_db
      PGPORT: 9091
    depends_on:
      - redis
      - prometheus
      - grafana
      - postgrestodo
    networks:
      - backend
    volumes:
      - ./logs:/tmp/logs

  apache-frontend:
    image: httpd:latest
    container_name: apache-frontend
    ports:
      - '80:80'
    volumes:
      - ./frontend:/usr/local/apache2/htdocs/:ro
    depends_on:
      - nginx
    networks:
      - backend

  postgrestodo:
    image: postgres:latest
    container_name: postgrestodo
    environment:
      POSTGRES_USER: todo
      POSTGRES_PASSWORD: todo
      POSTGRES_DB: todo_db
      POSTGRES_PORT: 9091
    ports:
      - '9091:9091'
    command: ['postgres', '-p', '9091']
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend

  redis:
    image: redis:latest
    container_name: redis
    ports:
      - '6379:6379'
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    networks:
      - backend
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle' # Allows config reloads without restart
      - '--web.enable-remote-write-receiver' # Enables remote write endpoint for k6

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '4000:3000'
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_PROVISIONING_ENABLED=true
    volumes:
      - ./grafana/dashboards.json:/etc/grafana/provisioning/dashboards/dashboard.json
      - ./grafana/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./grafana/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./grafana:/var/lib/grafana
    networks:
      - backend

  k6:
    image: grafana/k6
    container_name: k6
    volumes:
      - ./tests:/scripts
    networks:
      - backend
    depends_on:
      - prometheus
      - pm2-cluster
    ports:
      - '6565:6565' # Expose the K6 Prometheus metrics endpoint
    environment:
      - K6_PROMETHEUS_RW_SERVER_URL=http://prometheus:9090/api/v1/write # Prometheus remote write endpoint
      - K6_PROMETHEUS_RW_TREND_STATS=p(95),p(99),min,max # Custom trend stats
    command: run --out experimental-prometheus-rw /scripts/load.test.js

volumes:
  pgdata:
    driver: local
networks:
  backend:
    driver: bridge
